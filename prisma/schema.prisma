// File: prisma/schema.prisma

// datasource db mendefinisikan koneksi database Anda
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client menginstruksikan Prisma untuk membuat Prisma Client
generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODEL-MODEL UNTUK MANAJEMEN KONTEN
// =================================================================

model Category {
  id       Int       @id @default(autoincrement())
  name     Json
  articles Article[]
}

model PlantType {
  id       Int       @id @default(autoincrement())
  name     Json
  articles Article[]
  plants   Plant[]   @relation("PlantToPlantType")
}

// =================================================================
// MODEL-MODEL UTAMA APLIKASI
// =================================================================

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String
  password        String
  role            Role              @default(USER)
  articles        Article[]
  submissions     EventSubmission[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  address         String?
  phoneNumber     String?
  socialMedia     Json?
}

model Article {
  id                 Int                    @id @default(autoincrement())
  title              Json
  excerpt            Json
  content            Json
  imageUrl           String
  author             User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId           Int
  status             ArticleStatus          @default(DRAFT)
  feedback           String?                @db.Text
  viewCount          Int                    @default(0)
  likeCount          Int                    @default(0)
  adminEditRequest   AdminEditRequestStatus @default(NONE)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  plantType   PlantType? @relation(fields: [plantTypeId], references: [id])
  plantTypeId Int?
  
  seo ArticleSeo?
}

model ArticleSeo {
  id              Int      @id @default(autoincrement())
  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId       Int      @unique

  metaTitle       Json?
  metaDescription Json?
  keywords        String?
  canonicalUrl    String?
  metaRobots      String?  @default("index, follow")
  ogTitle         Json?
  ogDescription   Json?
  ogImageUrl      String?
  ogType          String?  @default("article")
  ogUrl           String?
  ogSiteName      String?
  twitterCard     String?  @default("summary_large_image")
  twitterTitle    Json?
  twitterDescription Json?
  twitterImageUrl String?
  twitterSite     String?
  twitterCreator  String?
  structuredData  Json?
  updatedAt       DateTime @updatedAt
}

model Plant {
  id             Int       @id @default(autoincrement())
  name           Json
  scientificName String
  description    Json
  imageUrl       String
  stores         Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  plantType   PlantType? @relation("PlantToPlantType", fields: [plantTypeId], references: [id])
  plantTypeId Int?
}

model Event {
  id                 Int               @id @default(autoincrement())
  title              Json
  description        Json
  imageUrl           String
  location           String
  organizer          String
  startDate          DateTime
  endDate            DateTime
  eventType          EventType
  externalUrl        String?
  submissions        EventSubmission[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  externalLinkClicks Int               @default(0)
}

model EventSubmission {
  id              Int      @id @default(autoincrement())
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         Int
  submissionUrl   String
  submissionNotes String?  @db.Text
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  placement       Int?
}

// =================================================================
// MODEL UNTUK PENGATURAN SITUS
// =================================================================

model SiteSettings {
  id                  Int           @id @default(1)
  name                String?
  logoUrl             String?
  faviconUrl          String?
  businessDescription Json?
  contactInfo         Json?
  faqs                Json?
  companyValues       Json?
  privacyPolicy       Json?
  
  // ID Pelacakan (non-SEO)
  googleAnalyticsId   String?
  googleAdsId         String? // ID untuk skrip Google Ads
  metaPixelId         String?
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  bannerTagline       Json?
  bannerImages        BannerImage[]

  seo                 SiteSeo?
}

model SiteSeo {
  id                  Int          @id @default(autoincrement())
  siteSettings        SiteSettings @relation(fields: [siteSettingsId], references: [id], onDelete: Cascade)
  siteSettingsId      Int          @unique
  metaTitle           Json?
  metaDescription     Json?
  metaKeywords        String?
  ogDefaultTitle      Json?
  ogDefaultDescription Json?
  ogDefaultImageUrl   String?
  twitterSite         String?
  googleSiteVerificationId String?
  updatedAt           DateTime @updatedAt
}

model BannerImage {
  id             Int          @id @default(autoincrement())
  imageUrl       String
  siteSettings   SiteSettings @relation(fields: [siteSettingsId], references: [id], onDelete: Cascade)
  siteSettingsId Int
}

model JournalistMessage {
  id        Int      @id @default(1)
  title     Json
  content   Json
  updatedAt DateTime @updatedAt
}

// =================================================================
// MODEL-MODEL BARU UNTUK MANAJEMEN IKLAN
// =================================================================

model AdPlacement {
  id        Int         @id @default(autoincrement())
  name      String      @unique // Contoh: "Sidebar Vertikal", "Header Horizontal"
  type      AdType      // Tipe iklan: VERTICAL, HORIZONTAL, BANNER
  isActive  Boolean     @default(true) // Untuk mengaktifkan/menonaktifkan seluruh grup iklan
  ads       AdContent[] // Daftar konten iklan di dalam placement ini
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model AdContent {
  id          Int         @id @default(autoincrement())
  imageUrl    String      // URL gambar iklan
  linkUrl     String      // URL tujuan saat iklan diklik
  isActive    Boolean     @default(true) // Untuk mengaktifkan/menonaktifkan iklan individual
  placement   AdPlacement @relation(fields: [placementId], references: [id], onDelete: Cascade)
  placementId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// =================================================================
// ENUMS
// =================================================================

enum Role {
  ADMIN
  JOURNALIST
  USER
}

enum ArticleStatus {
  DRAFT
  IN_REVIEW
  NEEDS_REVISION
  JOURNALIST_REVISING
  REVISED
  PUBLISHED
  REJECTED
}

enum AdminEditRequestStatus {
  NONE
  PENDING
  APPROVED
  DENIED
}

enum EventType {
  INTERNAL
  EXTERNAL
}

enum AdType {
  VERTICAL
  HORIZONTAL
  BANNER
}